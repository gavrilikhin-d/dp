Rule: <name: RuleName> ':' <pattern: Pattern>
Pattern: <alts: Alternatives> => alts
Alternatives: Sequence ('|' Sequence)*
Sequence: <patterns: Repeat+> <action: Action?>
Repeat: <pattern: AtomicPattern> <op: /[*+?]/?>
AtomicPattern
	: '(' <pattern: Pattern> ')' => pattern
	| Named
	| RuleReference
	| Regex
	| Text
PatternInParentheses: '(' <pattern: Pattern> ')' => pattern
Named: '<' <name: Identifier> ':' <pattern: Pattern> '>'
Identifier: <x: /[a-z_][a-zA-Z_0-9]*/> => x
RuleReference: RuleName
RuleName: /[A-Z][a-zA-Z0-9]*/
Regex: '/' /[^/]+/ '/'
Text: Char | String | /[^\s*+?()|<:>{}=]+/
Char: /'.'/
String: /"([^"\\]|\\.)*"/

Action: "=>" <value: Throw | Return> => value
Return: <value: Expression> => Return(value)
Throw: "throw" <error: Expression> => Throw(error)

Distinct: <ty: DistinctObject | DistinctValue> => ty
ObjectConstructor: <obj: Object | DistinctObject> => obj
DistinctObject: <ty: Typename> <obj: Object> => obj as ty
DistinctValue: <ty: Typename> '(' <value: Value> ')' => value as ty
Object: '{' '}' | '{' FieldInitializer (, FieldInitializer)* ,? '}'
FieldInitializer
	: <name: Identifier> ':' <value: Expression>  => value as name
	| <var: Identifier> => Variable(var) as var
Expression: Cast | Variable | Value
Typename: <ty: /[A-Z][a-zA-Z0-9]*/> => ty
Type: <ty: Typename | Variable> => ty
Cast: <expr: Value | Variable> as <ty: Type>
Value: DistinctValue | ObjectConstructor | String | Char | Integer
Variable: Identifier
Integer: <value: /[0-9]+/> => value