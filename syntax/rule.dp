Action: "=>" <value: Throw | Return> => value;
Return: <value: Expression> => Return(value);
Throw: "throw" <error: Expression> => Throw(error);

Rule: <name: RuleName> ':' <pattern: Pattern> /;|($)/;
RuleName
	: /[A-Z][a-zA-Z0-9]*/
	| <name: /[a-z_][a-zA-Z_0-9]*/>
	=> throw RuleNameNotCapitalized { at: @name };
Pattern: Alternatives;
Alternatives: Sequence ('|' Sequence)*;
Sequence: <patterns: Repeat+> <action: Action?>;
Repeat
	: <pattern: AtomicPattern> * => Repeat { pattern }
	| <pattern: AtomicPattern> + => Repeat { pattern, at_least: 1 }
	| <pattern: AtomicPattern> ? => Repeat { pattern, at_most: 1 }
	| AtomicPattern;
AtomicPattern
	: '(' <pattern: Pattern> ')' => pattern
	| Named
	| RuleReference
	| Regex
	| Text;
PatternInParentheses: '(' <pattern: Pattern> ')' => pattern;
Named: '<' <name: Identifier> ':' <pattern: Pattern> '>';
Identifier: /[a-z_][a-zA-Z_0-9]*/;
RuleReference: <name: /[A-Z][a-zA-Z0-9]*/> => RuleReference(name);
